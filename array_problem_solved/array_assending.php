<?php
// Ascending Order (‡¶ä‡¶∞‡ßç‡¶ß‡ßç‡¶¨‡¶ï‡ßç‡¶∞‡¶Æ) 
// =>Ascending order ‡¶Æ‡¶æ‡¶®‡ßá ‡¶π‡¶≤‡ßã ‡¶õ‡ßã‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßú ‡¶ï‡ßç‡¶∞‡¶Æ‡ßá ‡¶∏‡¶æ‡¶ú‡¶æ‡¶®‡ßã‡•§ ‡¶Ø‡ßá‡¶Æ‡¶®: 1, 2, 3, 4, 5 ‡¶¨‡¶æ A, B, C, D.
// ---------------------- PHP-‡¶§‡ßá Ascending Order ‡¶è‡¶∞ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: --------------------
// <!-- ‡ßß. Array Sorting (‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ array): --->

$numbere = array(5, 7, 3, 9, 2, 1);
sort($number);
print_r($number);
// Output: Array ( [Karim] => 20 [Mina] => 30 [Rahim] => 25 )

// <!-- ‡ß®. Associative Array ‡¶∏‡¶∞‡ßç‡¶ü‡¶ø‡¶Ç (‡¶Æ‡¶æ‡¶® ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶æ‡¶∞‡ßá): -->
$age = array("Rahim"=>"25", "Karim"=>"20", "Mina"=>"30");
arsort($age);
print_r($age);
// Output: Array ( [Mina] => 30 [Rahim] => 25 [Karim] => 20 )
// ‡ß©. Associative Array ‡¶∏‡¶∞‡ßç‡¶ü‡¶ø‡¶Ç (‡¶ï‡ßÄ ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶æ‡¶∞‡ßá):
$age = array("Rahim"=>"25", "Karim"=>"20", "Mina"=>"30");
krsort($age);
print_r($age);
// Output: Array ( [Rahim] => 25 [Mina] => 30 [Karim] => 20 )
// Descending Order (‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶ï‡ßç‡¶∞‡¶Æ)
// Descending order ‡¶Æ‡¶æ‡¶®‡ßá ‡¶π‡¶≤‡ßã ‡¶¨‡ßú ‡¶•‡ßá‡¶ï‡ßá ‡¶õ‡ßã‡¶ü ‡¶ï‡ßç‡¶∞‡¶Æ‡ßá ‡¶∏‡¶æ‡¶ú‡¶æ‡¶®‡ßã‡•§ ‡¶Ø‡ßá‡¶Æ‡¶®: 5, 4, 3, 2, 1 ‡¶¨‡¶æ D, C, B, A.
// PHP-‡¶§‡ßá Descending Order ‡¶è‡¶∞ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
// ‡ßß. Array ‡¶∏‡¶∞‡ßç‡¶ü‡¶ø‡¶Ç (‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ array):
$numbers = array(4, 2, 8, 6);
rsort($numbers);
print_r($numbers);
// Output: Array ( [0] => 8 [1] => 6 [2] => 4 [3] => 2 )
// ‡ß®. Associative Array ‡¶∏‡¶∞‡ßç‡¶ü‡¶ø‡¶Ç (‡¶Æ‡¶æ‡¶® ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶æ‡¶∞‡ßá):
$age = array("Rahim"=>"25", "Karim"=>"20", "Mina"=>"30");
arsort($age);
print_r($age);
// Output: Array ( [Mina] => 30 [Rahim] => 25 [Karim] => 20 )
// ‡ß©. Associative Array ‡¶∏‡¶∞‡ßç‡¶ü‡¶ø‡¶Ç (‡¶ï‡ßÄ ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶æ‡¶∞‡ßá):
$age = array("Rahim"=>"25", "Karim"=>"20", "Mina"=>"30");
krsort($age);
print_r($age);
// Output: Array ( [Rahim] => 25 [Mina] => 30 [Karim] => 20 )
// üíØüì∂Multidimensional Array ‡¶∏‡¶∞‡ßç‡¶ü‡¶ø‡¶Ç
// üì∂Ascending Order:
$students = array(
    array("name" => "Rahim", "score" => 85),
    array("name" => "Karim", "score" => 78),
    array("name" => "Mina", "score" => 92)
);

// Score ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶æ‡¶∞‡ßá ‡¶∏‡¶∞‡ßç‡¶ü‡¶ø‡¶Ç
usort($students, function($a, $b) {
    return $a['score'] - $b['score'];
});
print_r($students);
// Output: Karim (78), Rahim (85), Mina (92)
// üì∂Descending Order:
$students = array(
    array("name" => "Rahim", "score" => 85),
    array("name" => "Karim", "score" => 78),
    array("name" => "Mina", "score" => 92)
);

// Score ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶æ‡¶∞‡ßá ‡¶∏‡¶∞‡ßç‡¶ü‡¶ø‡¶Ç
usort($students, function($a, $b) {
    return $b['score'] - $a['score'];
});
print_r($students);
// Output: Mina (92), Rahim (85), Karim (78)
//üíØüì∂-------Reversing String Values in a Multidimensional Array-------üíØüì∂
$people = array(
    array("Name" => "Rahim", "Age" => "25", "City" => "Dhaka"),
    array("Name" => "Karim", "Age" => "20", "City" => "Chittagong"),
    array("Name" => "Mina", "Age" => "30", "City" => "Sylhet")
);

// Reverse the string values in the multidimensional array
$reversed = array_map(function($person) {
    foreach ($person as $key => $value) {
        // Reverse each string value
        if (is_string($value)) {
            $person[$key] = strrev($value);
        }
    }
    return $person;
}, $people);

print_r($reversed);
// Output: Array ( [0] => Array ( [Name] => mihaR [Age] => 52 [City] => akahD ) [1] => Array ( [Name] => miraK [Age] => 02 [City] => gnogattihC ) [2] => Array ( [Name] => aniM [Age] => 03 [City] => tehlyS ) )

// ‡¶∏‡¶∞‡ßç‡¶ü‡¶ø‡¶Ç ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£:

// sort() - ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ array ‡¶ï‡ßá ascending order ‡¶è ‡¶∏‡¶æ‡¶ú‡¶æ‡ßü

// rsort() - ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ array ‡¶ï‡ßá descending order ‡¶è ‡¶∏‡¶æ‡¶ú‡¶æ‡ßü

// asort() - Associative array ‡¶ï‡ßá value ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶æ‡¶∞‡ßá ascending order ‡¶è ‡¶∏‡¶æ‡¶ú‡¶æ‡ßü

// arsort() - Associative array ‡¶ï‡ßá value ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶æ‡¶∞‡ßá descending order ‡¶è ‡¶∏‡¶æ‡¶ú‡¶æ‡ßü

// ksort() - Associative array ‡¶ï‡ßá key ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶æ‡¶∞‡ßá ascending order ‡¶è ‡¶∏‡¶æ‡¶ú‡¶æ‡ßü

// krsort() - Associative array ‡¶ï‡ßá key ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶æ‡¶∞‡ßá descending order ‡¶è ‡¶∏‡¶æ‡¶ú‡¶æ‡ßü

// usort() - User-defined comparison function ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá array ‡¶∏‡¶æ‡¶ú‡¶æ‡ßü
?>